import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/styles.module.css";
import { Heading, Route } from "../components/heading";
import { useState } from "react";
import { remark } from "remark";
import html from "remark-html";
import useSWR from "swr";
import { OutData } from "./api/chat";
import { PromptCategories, Sidebar } from "../components/sidebar";

const inter = Inter({ subsets: ["latin"] });

async function getResponse(message: string): Promise<OutData> {
    return new Promise((resolve, reject) => {
        var myHeaders = new Headers();
        myHeaders.append("Content-Type", "text/plain");

        var raw = message;

        var requestOptions = {
            method: "POST",
            headers: myHeaders,
            body: raw,
            // redirect: 'follow'
        };

        fetch("/api/chat", requestOptions)
            .then((response) => response.text())
            .then((result) => {
                resolve(JSON.parse(result) as OutData);
            })
            .catch((error) => {
                reject(error);
            });
    });
}

type HTMLString = string;
type MDString = string;

async function convertMDtoHTML(md: MDString): Promise<HTMLString> {
    return new Promise(async (resolve, reject) => {
        // remark()
        //     .use(html)
        //     .process(md, function (err, file) {
        //         if (err) {
        //             reject(err);
        //         } else {
        //             resolve(String(file));
        //         }
        //     });

        const processedContent = await remark().use(html).process(md);
        const contentHtml = processedContent
            .toString()
            .replaceAll("\\n", "<br />");
        resolve(contentHtml);
    });
}

// -----

export default function Chat() {
    const [message, setMessage] = useState<string>("");
    const [response, setResponse] = useState<HTMLString>("");
    const [loading, setLoading] = useState<boolean>(false);

    const submit = async () => {
        setLoading(true);
        const { Message } = await getResponse(message);
        const htmlStr = await convertMDtoHTML(Message as MDString);
        setResponse(htmlStr);
        setMessage("");
        setLoading(false);
    };

    const [sidebarHidden, setSidebarHidden] = useState<boolean>(true);
    const [sidebarCategory, setSidebarCategory] = useState<PromptCategories>(
        PromptCategories.Copywriting
    );

    const openSidebar = (category: PromptCategories) => {
        setSidebarHidden(false);
        setSidebarCategory(category);
    };

    const closeSidebar = () => {
        setSidebarHidden(true);
    };

    return (
        <>
            <Head>
                <title>Chat | Eventster</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <meta
                    name='viewport'
                    content='width=device-width, initial-scale=1'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <main className={styles.main}>
                <Heading />
                <Sidebar
                    hidden={sidebarHidden}
                    category={sidebarCategory}
                    chosenPrompt={setMessage}
                    closeMe={closeSidebar}
                />
                <div className={styles.center}>
                    <div
                        className={
                            "flex flex-col gap-0 [&>*]:m-0 border-solid border-y-2 border-gray-400 w-screen h-72 mt-16"
                        }
                    >
                        <div className={"overflow-auto h-64 p-12"}>
                            <div
                                dangerouslySetInnerHTML={{ __html: response }}
                            />
                        </div>
                        <div className={"flex flex-row h-16"}>
                            <input
                                type='text'
                                className={
                                    "w-screen h-8 mt-16 p-2 border-solid border-t-2 border-gray-400 bg-zinc-100 dark:bg-zinc-900"
                                }
                                onKeyUp={(e) => {
                                    if (e.key === "Enter") {
                                        submit();
                                    }
                                }}
                                onChange={(e) => {
                                    setMessage(e.target.value);
                                }}
                                value={message}
                            />
                            {loading ? (
                                <div className='w-24 flex flex-col-reverse'>
                                    <p>Loading...</p>
                                </div>
                            ) : (
                                <button
                                    className={
                                        "w-24 h-8 mt-16 p-2 border-solid border-t-2 border-gray-400"
                                    }
                                    onClick={() => {
                                        submit();
                                    }}
                                >
                                    Send
                                </button>
                            )}
                        </div>
                    </div>
                </div>

                <div className={styles.grid}>
                    <a
                        onClick={() => openSidebar(PromptCategories.Ideation)}
                        className={styles.card}
                        target='_blank'
                        rel='noopener noreferrer'
                    >
                        <h2 className={inter.className}>
                            Ideate <span>-&gt;</span>
                        </h2>
                        <p className={inter.className}>
                            Prompts to help you refine the concept of your
                            event.
                        </p>
                    </a>

                    <a
                        onClick={() => openSidebar(PromptCategories.Logistics)}
                        className={styles.card}
                        target='_blank'
                        rel='noopener noreferrer'
                    >
                        <h2 className={inter.className}>
                            Logistics <span>-&gt;</span>
                        </h2>
                        <p className={inter.className}>
                            Prompts to help you source various resources for
                            your event.
                        </p>
                    </a>

                    <a
                        onClick={() =>
                            openSidebar(PromptCategories.Copywriting)
                        }
                        className={styles.card}
                        target='_blank'
                        rel='noopener noreferrer'
                    >
                        <h2 className={inter.className}>
                            Copywriting <span>-&gt;</span>
                        </h2>
                        <p className={inter.className}>
                            Get assistance writing every invitation and email
                            for your event.
                        </p>
                    </a>

                    <a
                        onClick={() => openSidebar(PromptCategories.Surveying)}
                        className={styles.card}
                        target='_blank'
                        rel='noopener noreferrer'
                    >
                        <h2 className={inter.className}>
                            Surveying <span>-&gt;</span>
                        </h2>
                        <p className={inter.className}>
                            Don&apos;t know what to ask attendees and sponsors?
                            We&apos;ll help.
                        </p>
                    </a>
                </div>
            </main>
        </>
    );
}
